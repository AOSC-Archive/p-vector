#!/usr/bin/env python3
import os
import sys

import pymongo
import yaml
from pymongo.collection import Collection

sys.path.insert(0, os.path.normpath(os.path.dirname(__file__) + '/../libexec/p-vector'))
import module_scan
import module_release

interrupted = False

conf_common = None
conf_branches = {}


def check_file_dup(file_col: Collection):
    cur = file_col.aggregate([

        {'$match': {'is_dir': False}},  # Exclude directories

        {'$group': {  # Count packages that own the same file
            '_id': '$path',
            'count': {'$sum': 1},
            'pkgs': {'$push': {
                'name': '$pkg.name',
                'ver': '$pkg.ver'
            }}
        }},

        {'$match': {'count': {'$gt': 1}}},  # Pick the files which are contained in >1 packages

        {'$group': {  # Pick the first file as sample for each package set
            '_id': '$pkgs',
            'count': {'$sum': 1},
            'sample': {'$first': '$_id'}
        }},

    ], allowDiskUse=True)
    for i in cur:
        print(*[p['name'] + '@' + p['ver'] for p in i['_id']], end=': ')
        print(i['sample'], end='')
        if i['count'] == 1:
            print()
        else:
            print(' and', i['count'], 'more')


def main():
    if len(sys.argv) != 3:
        print('Usage: %s CONF (scan|release)' % sys.argv[0], file=sys.stderr)
        exit(1)

    conf_file = sys.argv[1]
    action = sys.argv[2]

    with open(conf_file, 'rb') as f:
        y = yaml.load_all(f)
        global conf_common, conf_branches
        conf_common = next(y)
        for i in y:
            if i is None:
                continue
            conf_branches[i['branch']] = i

    try:
        client = pymongo.MongoClient(
            conf_common['db_conn'],
            appname='p-vector', ssl_ca_certs=conf_common['db_conn_cert'])
    except KeyError:
        client = pymongo.MongoClient(
            conf_common['db_conn'],
            appname='p-vector')

    db = client['p-vector']
    base_dir = conf_common['path']
    legacy_dir = conf_common['path_legacy'] if 'path_legacy' in conf_common else None

    if action == 'scan':
        module_scan.scan(db, base_dir)
    elif action == 'release':
        module_release.generate(db, base_dir, legacy_dir, conf_common, conf_branches)


if __name__ == '__main__':
    main()
