#!/usr/bin/env python3
import os
import sys
import logging

import yaml
import psycopg2
import psycopg2.extras

sys.path.insert(0, os.path.normpath(os.path.dirname(__file__) + '/../libexec/p-vector'))
import internal_db
import module_ipc
import module_scan
import module_sync
import module_release

logging.basicConfig(
    format='%(asctime)s %(levelname).1s [%(name)5.5s] %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S', level=logging.INFO)

conf_common = None
conf_branches = {}

def usage():
    print('Usage: %s CONF (scan|release|sync|analyze|reset)' % sys.argv[0], file=sys.stderr)
    sys.exit(1)

def main():
    if len(sys.argv) < 3:
        usage()

    conf_file = sys.argv[1]
    action = sys.argv[2]
    action_args = sys.argv[3:]

    with open(conf_file, 'rb') as f:
        y = yaml.load_all(f)
        global conf_common, conf_branches
        conf_common = next(y)
        for i in y:
            if i is None:
                continue
            conf_branches[i['branch']] = i

    db = psycopg2.connect(conf_common['db_pgconn'],
                          cursor_factory=psycopg2.extras.DictCursor)
    base_dir = conf_common['path']

    if action == 'scan':
        if 'zmq_change' in conf_common:
            module_ipc.zmq_change = conf_common['zmq_change']
        module_ipc.init()
        module_scan.scan(db, base_dir)
    elif action == 'release':
        module_release.generate(db, base_dir, conf_common, conf_branches)
    elif action == 'sync':
        module_sync.sync_db(db)
    elif action == 'analyze':
        if len(action_args) == 1 and action_args[0] == 'full':
            full = True
        internal_db.analyze_issues(db, full)
    elif action == 'reset':
        arg = action_args[0]
        assert input("Please confirm to reset tables for %s [YES]: " % arg) == 'YES'
        internal_db.drop_tables(db, arg)
    else:
        usage()


if __name__ == '__main__':
    main()
